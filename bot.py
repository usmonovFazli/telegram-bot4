import logging
import os
import openpyxl
from openpyxl.styles import PatternFill
from dotenv import load_dotenv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ChatMemberHandler,
    ContextTypes,
    filters,
)

from database import (
    init_db,
    add_or_update_channel,
    update_channel_status,
    get_channels,
    increment_video_count,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN", "")
AUTHORIZED_PASSWORD = os.getenv("BOT_PASSWORD", "")
LEAVE_PASSWORD = "1234"

authorized_users = set()
leave_confirmations = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [["üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["üì• –≠–∫—Å–ø–æ—Ä—Ç Excel", "üö™ –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç—ã"]],
    resize_keyboard=True
)

logging.basicConfig(level=logging.INFO)

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in authorized_users:
        await update.message.reply_text("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
        context.user_data["awaiting_password"] = True

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if context.user_data.get("awaiting_password"):
        if text == AUTHORIZED_PASSWORD:
            authorized_users.add(user_id)
            context.user_data["awaiting_password"] = False
            await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!", reply_markup=MAIN_MENU)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    elif leave_confirmations.get(user_id) == "password":
        await handle_leave_password(update, context)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ---
def check_access(user_id):
    return user_id in authorized_users

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_password(update, context)

# --- –í–∏–¥–µ–æ ---
async def prompt_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ /start –∏ –ø–∞—Ä–æ–ª—å.")
        return
    await update.message.reply_text("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not update.message or not update.message.video:
        return

    video = update.message.video
    caption = update.message.caption or "üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ:"
    chats = get_channels()

    count = 0
    for chat_id, *_ in chats:
        try:
            await context.bot.send_video(chat_id=chat_id, video=video.file_id, caption=caption)
            increment_video_count(chat_id)
            count += 1
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {chat_id}: {e}")

    await update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–æ–≤ ---
async def chat_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.my_chat_member.chat
    new_status = update.my_chat_member.new_chat_member.status

    try:
        members = await context.bot.get_chat_member_count(chat.id)
    except Exception as e:
        members = -1
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

    if members != -1 and members < 1:
        try:
            update_channel_status(chat.id, chat_type="left")  # ‚úÖ –î–û –≤—ã—Ö–æ–¥–∞
            await context.bot.leave_chat(chat.id)
            logging.info(f"üö™ –ü–æ–∫–∏–Ω—É–ª —á–∞—Ç {chat.title} ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 50 ({members})")
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ {chat.title}: {e}")
        return


    link = f"https://t.me/{chat.username}" if chat.username else ""
    title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    try:
        add_or_update_channel(chat.id, title, members, new_status, link)
        logging.info(f"‚úÖ –ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {title} ({new_status}) ‚Äî {chat.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ ---
async def refresh_members(context: ContextTypes.DEFAULT_TYPE):
    chats = get_channels()
    for chat_id, title, _, _, _, _, link in chats:
        try:
            members = await context.bot.get_chat_member_count(chat_id)
            chat = await context.bot.get_chat(chat_id)
            update_channel_status(chat_id, title=chat.title, members=members, chat_type=chat.type, link=link)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {chat_id}: {e}")
            update_channel_status(chat_id, chat_type="left")

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await update.message.reply_text("‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö...")
    await refresh_members(context)

    chats = get_channels()
    if not chats:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø.")
        return

    stats = {
        "channel": {"active": 0, "inactive": 0},
        "group": {"active": 0, "inactive": 0},
        "supergroup": {"active": 0, "inactive": 0},
    }

    for _, _, _, _, _, chat_type, _ in chats:
        if chat_type in ["left", "kicked"]:
            for t in ["channel", "group", "supergroup"]:
                stats[t]["inactive"] += 0  # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            continue

        if chat_type in stats:
            stats[chat_type]["active"] += 1
        elif chat_type in ["left", "kicked"]:
            pass  # –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–µ

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    for _, _, _, _, _, chat_type, _ in chats:
        if chat_type in ["left", "kicked"]:
            # –ú—ã –Ω–µ –∑–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ ‚Äî –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞, –Ω–æ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–∫ "unknown" –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
            continue
        if chat_type in stats:
            continue  # —É–∂–µ —É—á—Ç—ë–Ω
    # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for chat in chats:
        _, _, _, _, _, chat_type, _ = chat
        if chat_type in stats:
            if chat_type in ["channel", "group", "supergroup"]:
                if chat_type in stats:
                    if chat_type in ["left", "kicked"]:
                        stats[chat_type]["inactive"] += 1
                else:
                    stats[chat_type] = {"active": 0, "inactive": 1}
        elif chat_type in ["left", "kicked"]:
            pass

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    total = len(chats)
    text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    for t, label in [("channel", "–ö–∞–Ω–∞–ª—ã"), ("group", "–ì—Ä—É–ø–ø—ã"), ("supergroup", "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã")]:
        active = stats[t]["active"]
        inactive = stats[t]["inactive"]
        total_type = active + inactive
        text += f"‚Ä¢ {label}: {total_type} ({active} –∞–∫—Ç–∏–≤–Ω—ã—Ö / {inactive} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö)\n"

    text += f"\n–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total}"

    await update.message.reply_text(text)


# --- –≠–∫—Å–ø–æ—Ä—Ç Excel ---
async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await update.message.reply_text("üì¶ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º...")
    await refresh_members(context)

    chats = get_channels()
    if not chats:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    active = [c for c in chats if c[5] not in ["left", "kicked"]]
    left = [c for c in chats if c[5] in ["left", "kicked"]]
    sorted_chats = active + left

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã"
    ws.append(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "–¢–∏–ø", "–°—Å—ã–ª–∫–∞"])

    red_fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
    green_fill = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")

    for row in sorted_chats:
        id_, title, members, videos, date_added, chat_type, link = row
        date_str = date_added.strftime('%Y-%m-%d %H:%M') if isinstance(date_added, datetime) else str(date_added)
        data = [id_, title, members, videos, date_str, chat_type, link]
        ws.append(data)
        fill = red_fill if chat_type in ["left", "kicked"] else green_fill
        for col in range(1, len(data) + 1):
            ws.cell(row=ws.max_row, column=col).fill = fill

    file_path = "channels_export.xlsx"
    wb.save(file_path)
    with open(file_path, "rb") as f:
        await update.message.reply_document(InputFile(f, filename="channels_export.xlsx"))
    os.remove(file_path)

# --- –ü–æ–∫–∏–Ω—É—Ç—å –≤—Å–µ —á–∞—Ç—ã ---
async def initiate_leave(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not check_access(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    leave_confirmations[user_id] = "confirm"
    markup = ReplyKeyboardMarkup([["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤?", reply_markup=markup)

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if leave_confirmations.get(user_id) != "confirm":
        return

    if text == "‚úÖ –î–∞":
        leave_confirmations[user_id] = "password"
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
    else:
        leave_confirmations.pop(user_id, None)
        await update.message.reply_text("‚ùé –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_MENU)

async def handle_leave_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if leave_confirmations.get(user_id) != "password":
        return

    if text == LEAVE_PASSWORD:
        chats = get_channels()  # ‚úÖ –≠–¢–û–ô –°–¢–†–û–ö–ò –ù–ï –•–í–ê–¢–ê–õ–û
        left = 0
        for chat_id, *_ in chats:
            try:
                update_channel_status(chat_id, chat_type="left")  # ‚úÖ —Ñ–∏–∫—Å —Å—Ç–∞—Ç—É—Å–∞
                await context.bot.leave_chat(chat_id)
                left += 1
            except Exception as e:
                logging.warning(f"‚ùå –ù–µ —Å–º–æ–≥ –≤—ã–π—Ç–∏ –∏–∑ {chat_id}: {e}")

        leave_confirmations.pop(user_id, None)
        await update.message.reply_text(f"üö™ –í—ã—à–µ–ª –∏–∑ {left} —á–∞—Ç–æ–≤.", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        leave_confirmations.pop(user_id, None)

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(ChatMemberHandler(chat_member_update, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.Regex("^üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ$"), prompt_video))
    app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats))
    app.add_handler(MessageHandler(filters.Regex("^üì• –≠–∫—Å–ø–æ—Ä—Ç Excel$"), export_excel))
    app.add_handler(MessageHandler(filters.Regex("^üö™ –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç—ã$"), initiate_leave))
    app.add_handler(MessageHandler(filters.Regex("^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$"), handle_confirmation))
    app.add_handler(MessageHandler(filters.VIDEO & filters.ChatType.PRIVATE, handle_video))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_text))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
