import logging
import os
import openpyxl
from dotenv import load_dotenv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ChatMemberHandler,
    ContextTypes,
    filters,
)

from database import (
    init_db,
    add_or_update_channel,
    get_channels,
    increment_video_count,
)

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN", "your_default_token")
AUTHORIZED_PASSWORD = os.getenv("BOT_PASSWORD")
LEAVE_PASSWORD = "1234"

authorized_users = set()
leave_confirmations = {}  # user_id: stage

MAIN_MENU = ReplyKeyboardMarkup(
    [["üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["üì• –≠–∫—Å–ø–æ—Ä—Ç Excel", "üö™ –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç—ã"]],
    resize_keyboard=True
)

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in authorized_users:
        await update.message.reply_text("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
        context.user_data["awaiting_password"] = True

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_password"):
        return

    password = update.message.text.strip()
    user_id = update.effective_user.id
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {password}")

    if password == AUTHORIZED_PASSWORD:
        authorized_users.add(user_id)
        context.user_data["awaiting_password"] = False
        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if context.user_data.get("awaiting_password"):
        await handle_password(update, context)
    elif leave_confirmations.get(user_id) == "password":
        await handle_leave_password(update, context)


def check_access(user_id):
    return user_id in authorized_users

async def prompt_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ /start –∏ –ø–∞—Ä–æ–ª—å.")
        return
    await update.message.reply_text("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not update.message or not update.message.video:
        return

    video = update.message.video
    caption = update.message.caption or "üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ:"
    chats = get_channels()

    count = 0
    for chat_id, *_ in chats:
        try:
            await context.bot.send_video(chat_id=chat_id, video=video.file_id, caption=caption)
            increment_video_count(chat_id)
            count += 1
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {chat_id}: {e}")

    await update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

async def chat_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.my_chat_member.chat
    new_status = update.my_chat_member.new_chat_member.status

    try:
        members = await context.bot.get_chat_member_count(chat.id)
    except Exception as e:
        members = -1
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

    if members != -1 and members < 50:
        try:
            await context.bot.leave_chat(chat.id)
            logging.info(f"üö™ –ü–æ–∫–∏–Ω—É–ª —á–∞—Ç {chat.title} ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 50 ({members})")
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ {chat.title}: {e}")
        return

    link = f"https://t.me/{chat.username}" if chat.username else ""
    title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    try:
        add_or_update_channel(chat.id, title, members, new_status, link)
        logging.info(f"‚úÖ –ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {title} ({new_status}) ‚Äî {chat.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    chats = get_channels()
    total = len(chats)
    channels = sum(1 for c in chats if c[5] == "channel")
    groups = sum(1 for c in chats if c[5] == "group")
    supergroups = sum(1 for c in chats if c[5] == "supergroup")
    active = sum(1 for c in chats if c[2] > 0)
    inactive = total - active

    text = (
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {channels}\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø: {groups}\n"
        f"‚Ä¢ –°—É–ø–µ—Ä–≥—Ä—É–ø–ø: {supergroups}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
        f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive}"
    )
    await update.message.reply_text(text)

async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    chats = get_channels()
    if not chats:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã"
    ws.append(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "–¢–∏–ø", "–°—Å—ã–ª–∫–∞"])

    for row in chats:
        id_, title, members, videos, date_added, chat_type, link = row
        date_str = date_added.strftime('%Y-%m-%d %H:%M') if isinstance(date_added, datetime) else str(date_added)
        ws.append([id_, title, members, videos, date_str, chat_type, link])

    file_path = "channels_export.xlsx"
    wb.save(file_path)

    with open(file_path, "rb") as f:
        await update.message.reply_document(InputFile(f, filename="channels_export.xlsx"))

    os.remove(file_path)

async def initiate_leave(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not check_access(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    leave_confirmations[user_id] = "confirm"
    markup = ReplyKeyboardMarkup([["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤?", reply_markup=markup)

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if leave_confirmations.get(user_id) != "confirm":
        return

    if text == "‚úÖ –î–∞":
        leave_confirmations[user_id] = "password"
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞:")
    else:
        leave_confirmations.pop(user_id, None)
        await update.message.reply_text("‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)

async def handle_leave_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if leave_confirmations.get(user_id) != "password":
        return

    if text == LEAVE_PASSWORD:
        chats = get_channels()
        left = 0
        for chat_id, *_ in chats:
            try:
                await context.bot.leave_chat(chat_id)
                left += 1
            except Exception as e:
                logging.warning(f"‚ùå –ù–µ —Å–º–æ–≥ –≤—ã–π—Ç–∏ –∏–∑ {chat_id}: {e}")

        leave_confirmations.pop(user_id, None)
        await update.message.reply_text(f"üö™ –í—ã—à–µ–ª –∏–∑ {left} —á–∞—Ç–æ–≤.", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        leave_confirmations.pop(user_id, None)

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(ChatMemberHandler(chat_member_update, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.Regex("^üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ$"), prompt_video))
    app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats))
    app.add_handler(MessageHandler(filters.Regex("^üì• –≠–∫—Å–ø–æ—Ä—Ç Excel$"), export_excel))
    app.add_handler(MessageHandler(filters.Regex("^üö™ –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç—ã$"), initiate_leave))
    app.add_handler(MessageHandler(filters.Regex("^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$"), handle_confirmation))
    app.add_handler(MessageHandler(filters.VIDEO & filters.ChatType.PRIVATE, handle_video))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_text))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
