import logging
import os
import openpyxl
from dotenv import load_dotenv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ChatMemberHandler,
    ContextTypes,
    filters,
)

from database import (
    init_db,
    add_or_update_channel,
    get_channels,
    increment_video_count,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN" , "7978985604:AAEuHxd3X-v2UNW3Twygfbf4VEKme2efGmo")
AUTHORIZED_PASSWORD = os.getenv("BOT_PASSWORD", "@12321231‚Äôm‚Äô@")

# –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = set()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [["üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["üì• –≠–∫—Å–ø–æ—Ä—Ç Excel"]],
    resize_keyboard=True
)

logging.basicConfig(level=logging.INFO)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in authorized_users:
        await update.message.reply_text("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
        context.user_data["awaiting_password"] = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_password"):
        return

    password = update.message.text.strip()
    user_id = update.effective_user.id

    if password == AUTHORIZED_PASSWORD:
        authorized_users.add(user_id)
        context.user_data["awaiting_password"] = False
        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def check_access(user_id):
    return user_id in authorized_users

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ
async def prompt_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ /start –∏ –ø–∞—Ä–æ–ª—å.")
        return
    await update.message.reply_text("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not update.message or not update.message.video:
        return

    video = update.message.video
    caption = update.message.caption or "üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ:"
    chats = get_channels()

    count = 0
    for chat_id, *_ in chats:
        try:
            await context.bot.send_video(chat_id=chat_id, video=video.file_id, caption=caption)
            increment_video_count(chat_id)
            count += 1
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {chat_id}: {e}")

    await update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
async def chat_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.my_chat_member.chat
    new_status = update.my_chat_member.new_chat_member.status

    if new_status in ["member", "administrator"]:
        try:
            members = await context.bot.get_chat_member_count(chat.id)
        except Exception as e:
            members = -1
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

        chat_type = chat.type or "unknown"
        link = f"https://t.me/{chat.username}" if chat.username else ""
        title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        add_or_update_channel(chat.id, title, members, chat_type, link)
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {title} ({chat_type}) ‚Äî {chat.id}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    chats = get_channels()
    if not chats:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø.")
        return

    filter_type = context.args[0].lower() if context.args else "all"
    valid_types = ["group", "channel", "all"]

    if filter_type not in valid_types:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π /stats [group|channel|all]")
        return

    filtered = []
    for _, title, members, videos, _, chat_type, _ in chats:
        if filter_type == "all" or chat_type == filter_type:
            filtered.append((title, members, videos, chat_type))

    if not filtered:
        await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞: {filter_type}")
        return

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({filter_type}):\n\n"
    for title, members, videos, chat_type in filtered:
        text += f"‚Ä¢ {title} ({chat_type}) ‚Äî üë• {members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, üìπ {videos} –≤–∏–¥–µ–æ\n"

    await update.message.reply_text(text)

# –≠–∫—Å–ø–æ—Ä—Ç Excel
async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    chats = get_channels()
    if not chats:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã"
    ws.append(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "–¢–∏–ø", "–°—Å—ã–ª–∫–∞"])

    for row in chats:
        id_, title, members, videos, date_added, chat_type, link = row
        date_str = date_added.strftime('%Y-%m-%d %H:%M') if isinstance(date_added, datetime) else str(date_added)
        ws.append([id_, title, members, videos, date_str, chat_type, link])

    file_path = "channels_export.xlsx"
    wb.save(file_path)

    with open(file_path, "rb") as f:
        await update.message.reply_document(InputFile(f, filename="channels_export.xlsx"))

    os.remove(file_path)

# –ì–ª–∞–≤–Ω–∞—è
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(ChatMemberHandler(chat_member_update, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.Regex("^üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ$"), prompt_video))
    app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats))
    app.add_handler(MessageHandler(filters.Regex("^üì• –≠–∫—Å–ø–æ—Ä—Ç Excel$"), export_excel))
    app.add_handler(MessageHandler(filters.VIDEO & filters.ChatType.PRIVATE, handle_video))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_password))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
