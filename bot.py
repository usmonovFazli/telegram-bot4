import logging
import os
import openpyxl
from openpyxl.styles import PatternFill
from dotenv import load_dotenv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ChatMemberHandler,
    ContextTypes,
    filters,
)

from database import (
    init_db,
    add_or_update_channel,
    update_channel_status,
    get_channels,
    increment_video_count,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN", "")
AUTHORIZED_PASSWORD = os.getenv("BOT_PASSWORD", "")

# –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
authorized_users = set()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [["üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["üì• –≠–∫—Å–ø–æ—Ä—Ç Excel"]],
    resize_keyboard=True
)

logging.basicConfig(level=logging.INFO)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in authorized_users:
        await update.message.reply_text("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
        context.user_data["awaiting_password"] = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_password"):
        return

    password = update.message.text.strip()
    user_id = update.effective_user.id

    if password == AUTHORIZED_PASSWORD:
        authorized_users.add(user_id)
        context.user_data["awaiting_password"] = False
        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def check_access(user_id):
    return user_id in authorized_users

# –ö–Ω–æ–ø–∫–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ
async def prompt_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ /start –∏ –ø–∞—Ä–æ–ª—å.")
        return
    await update.message.reply_text("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not update.message or not update.message.video:
        return

    video = update.message.video
    caption = update.message.caption or "üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ:"
    chats = get_channels()

    count = 0
    for chat_id, *_ in chats:
        try:
            await context.bot.send_video(chat_id=chat_id, video=video.file_id, caption=caption)
            increment_video_count(chat_id)
            count += 1
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {chat_id}: {e}")

    await update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–æ–≤
async def chat_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.my_chat_member.chat
    new_status = update.my_chat_member.new_chat_member.status

    try:
        members = await context.bot.get_chat_member_count(chat.id)
    except Exception as e:
        members = -1
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

    link = f"https://t.me/{chat.username}" if chat.username else ""
    title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    try:
        add_or_update_channel(chat.id, title, members, new_status, link)
        logging.info(f"‚úÖ –ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {title} ({new_status}) ‚Äî {chat.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π/—ç–∫—Å–ø–æ—Ä—Ç–æ–º
async def refresh_members(context: ContextTypes.DEFAULT_TYPE):
    chats = get_channels()
    for chat_id, title, _, _, _, _, link in chats:
        try:
            members = await context.bot.get_chat_member_count(chat_id)
            chat = await context.bot.get_chat(chat_id)
            name = chat.title or title
            update_channel_status(chat_id, title=name, members=members, chat_type=chat.type, link=link)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {chat_id}: {e}")
            update_channel_status(chat_id, chat_type="left")

# –ö–Ω–æ–ø–∫–∞: üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await update.message.reply_text("‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö...")
    await refresh_members(context)

    chats = get_channels()
    if not chats:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø.")
        return

    stats = {
        "channel": {"active": 0, "inactive": 0},
        "group": {"active": 0, "inactive": 0},
        "supergroup": {"active": 0, "inactive": 0},
    }

    for _, _, _, _, _, chat_type, _ in chats:
        if chat_type in ["left", "kicked"]:
            continue
        if chat_type in stats:
            stats[chat_type]["active"] += 1

    for _, _, _, _, _, chat_type, _ in chats:
        if chat_type in stats and chat_type not in ["left", "kicked"]:
            continue
        for t in stats:
            stats[t]["inactive"] += 0 if chat_type not in ["left", "kicked"] else 1

    text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    for t, label in [("channel", "–ö–∞–Ω–∞–ª—ã"), ("group", "–ì—Ä—É–ø–ø—ã"), ("supergroup", "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã")]:
        active = stats[t]["active"]
        inactive = stats[t]["inactive"]
        total_type = active + inactive
        text += f"‚Ä¢ {label}: {total_type} ({active} –∞–∫—Ç–∏–≤–Ω—ã—Ö / {inactive} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö)\n"

    text += f"\n–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(chats)}"
    await update.message.reply_text(text)

# –ö–Ω–æ–ø–∫–∞: üì• –≠–∫—Å–ø–æ—Ä—Ç Excel
async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await update.message.reply_text("üì¶ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º...")
    await refresh_members(context)

    chats = get_channels()
    if not chats:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    active_chats = [c for c in chats if c[5] not in ["left", "kicked"]]
    left_chats = [c for c in chats if c[5] in ["left", "kicked"]]
    sorted_chats = active_chats + left_chats

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã"
    ws.append(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "–¢–∏–ø", "–°—Å—ã–ª–∫–∞"])

    red_fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
    green_fill = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")

    for row in sorted_chats:
        id_, title, members, videos, date_added, chat_type, link = row
        date_str = date_added.strftime('%Y-%m-%d %H:%M') if isinstance(date_added, datetime) else str(date_added)
        data = [id_, title, members, videos, date_str, chat_type, link]
        ws.append(data)

        current_row = ws.max_row
        fill = red_fill if chat_type in ["left", "kicked"] else green_fill
        for col in range(1, len(data) + 1):
            ws.cell(row=current_row, column=col).fill = fill

    file_path = "channels_export.xlsx"
    wb.save(file_path)

    with open(file_path, "rb") as f:
        await update.message.reply_document(InputFile(f, filename="channels_export.xlsx"))

    os.remove(file_path)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(ChatMemberHandler(chat_member_update, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.Regex("^üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ$"), prompt_video))
    app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats))
    app.add_handler(MessageHandler(filters.Regex("^üì• –≠–∫—Å–ø–æ—Ä—Ç Excel$"), export_excel))
    app.add_handler(MessageHandler(filters.VIDEO & filters.ChatType.PRIVATE, handle_video))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_password))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
